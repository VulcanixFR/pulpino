diff --git a/decoder.sv b/decoder.sv
index 77d2a48..1c92b51 100644
--- a/decoder.sv
+++ b/decoder.sv
@@ -24,6 +24,8 @@
 //                                                                            //
 ////////////////////////////////////////////////////////////////////////////////
 
+`include "riscv_config.sv"
+
 import riscv_defines::*;
 
 module riscv_decoder
@@ -115,6 +117,8 @@ module riscv_decoder
 
   logic [1:0] csr_op;
 
+  // [DEBUG] DIFT
+  logic is_dift_i;
 
   /////////////////////////////////////////////
   //   ____                     _            //
@@ -182,6 +186,7 @@ module riscv_decoder
     bmask_a_mux_o               = BMASK_A_ZERO;
     bmask_b_mux_o               = BMASK_B_ZERO;
 
+    is_dift_i                   = 1'b0;
 
     unique case (instr_rdata_i[6:0])
 
@@ -269,7 +274,7 @@ module riscv_decoder
 
       OPCODE_STORE,
       OPCODE_STORE_POST: begin
-        if(instr_rdata_i[14:12] != 3'b111) begin // ¬ p.spsw
+        // if(instr_rdata_i[14:12] != 3'b111) begin // ¬ p.spsw
           data_req       = 1'b1;
           data_we_o      = 1'b1;
           rega_used_o    = 1'b1;
@@ -308,24 +313,24 @@ module riscv_decoder
               illegal_insn_o = 1'b1;
             end
           endcase
-        end else begin
+        // end else begin
           // p.spsw
 
-          data_req       = 1'b1;
-          rega_used_o    = 1'b1;
-          regb_used_o    = 1'b1;
-          alu_operator_o = ALU_ADD;
+          // data_req       = 1'b1;
+          // rega_used_o    = 1'b1;
+          // regb_used_o    = 1'b1;
+          // alu_operator_o = ALU_ADD;
 
-          // pass write data through ALU operand c
-          alu_op_c_mux_sel_o = OP_C_REGB_OR_FWD;
+          // // pass write data through ALU operand c
+          // alu_op_c_mux_sel_o = OP_C_REGB_OR_FWD;
 
-          // offset from immediate
-          imm_b_mux_sel_o     = IMMB_S;
-          alu_op_b_mux_sel_o  = OP_B_IMM;
+          // // offset from immediate
+          // imm_b_mux_sel_o     = IMMB_S;
+          // alu_op_b_mux_sel_o  = OP_B_IMM;
 
-          // store size
-          data_type_o = 2'b00; // SW
-        end
+          // // store size
+          // data_type_o = 2'b00; // SW
+        // end
       end
 
       OPCODE_LOAD,
@@ -972,6 +977,47 @@ module riscv_decoder
         endcase
       end
 
+      /////////////////////////////
+      //   ____ ___ _____ _____  //
+      //  |  _ \_ _|  ___|_   _| //
+      //  | | | | || |_    | |   //
+      //  | |_| | ||  _|   | |   //
+      //  |____/___|_|     |_|   //
+      //                         //
+      /////////////////////////////
+
+      `ifdef DIFT
+      // p.spsw / p.spsh / p.spsb / p.hmem
+      OPCODE_DIFT_STORE: begin
+
+        is_dift_i                   = 1'b1;
+                
+        // p.spsw ra, offset(rb)
+        data_req       = 1'b1;    // start transaction to data memory
+        data_we_o      = 1'b0;    
+
+        rega_used_o    = 1'b1;    // rs1 is used by current instruction
+        regb_used_o    = 1'b1;    // rs2 is used by current instruction
+        alu_operator_o = ALU_ADD; // ALU operation selection
+
+        // pass write data through ALU operand c
+        alu_op_c_mux_sel_o = OP_C_REGB_OR_FWD;
+
+        // offset from immediate
+        imm_b_mux_sel_o     = IMMB_S;
+        alu_op_b_mux_sel_o  = OP_B_IMM;
+
+        // store size
+        unique case (instr_rdata_i[13:12])
+          2'b00: data_type_o = 2'b00; // SW (p.spsw)
+          2'b01: data_type_o = 2'b01; // SH (p.spsh)
+          2'b10: data_type_o = 2'b10; // SB (p.spsb)
+          2'b11: data_type_o = 2'b00; // SW (p.hmem)
+        endcase
+
+      end
+      `endif
+
       default: begin
         illegal_insn_o = 1'b1;
       end
diff --git a/ex_stage.sv b/ex_stage.sv
index 5ac151a..99145e6 100644
--- a/ex_stage.sv
+++ b/ex_stage.sv
@@ -96,6 +96,7 @@ module riscv_ex_stage
 	input  logic        wb_ready_i  // WB stage ready for new data
 
 `ifdef DIFT // Ajout de tous les tags des registres en entrée
+	,
 	input  logic [ALU_MODE_WIDTH-1:0] alu_operator_i_mode,
 	input  logic        alu_operand_a_i_tag,
 	input  logic        alu_operand_b_i_tag,
diff --git a/if_stage.sv b/if_stage.sv
index a06bc4d..b50d8db 100644
--- a/if_stage.sv
+++ b/if_stage.sv
@@ -335,7 +335,7 @@ module riscv_if_stage
     if (rst_n == 1'b0)
     begin
       pc_if_o_tag <= 1'b0;
-    end els/e if (pc_set_i_tag) begin
+    end else if (pc_set_i_tag) begin
       pc_if_o_tag <= fetch_addr_n_tag;
     end
   end
diff --git a/include/riscv_defines.sv b/include/riscv_defines.sv
index 7b56880..764f4be 100644
--- a/include/riscv_defines.sv
+++ b/include/riscv_defines.sv
@@ -61,6 +61,9 @@ parameter REGC_S1   = 2'b10;
 parameter REGC_RD   = 2'b01;
 parameter REGC_ZERO = 2'b11;
 
+// DIFT custom
+parameter OPCODE_DIFT_STORE = 7'h1b;
+
 
 //////////////////////////////////////////////////////////////////////////////
 //      _    _    _   _    ___                       _   _                  //
diff --git a/load_store_unit.sv b/load_store_unit.sv
index dea5885..38b0c49 100644
--- a/load_store_unit.sv
+++ b/load_store_unit.sv
@@ -93,7 +93,7 @@ module riscv_load_store_unit
   logic [2:0]   rdata_offset_q_tag;          // Décalage dans le registre pour les tags
 `else
   logic [3:0]   rdata_q_tag;                 // Tags lus
-  logic [1:0]   rdata_offset_q_tag,          // Décalage dans le registre pour les tags
+  logic [1:0]   rdata_offset_q_tag;          // Décalage dans le registre pour les tags
 `endif
   logic [1:0]   data_type_q_tag;             // Type de données pour les tags
 `endif
diff --git a/riscv_core.sv b/riscv_core.sv
index 99169d4..dcc7616 100644
--- a/riscv_core.sv
+++ b/riscv_core.sv
@@ -862,9 +862,11 @@ module riscv_core
 
     .ext_counters_i          ( ext_perf_counters_i                    )
 `ifdef DIFT
+    ,
     .tpr_o                   ( tpr                                    ),
-    .tcr_o                   ( tcr                                    ),
+    .tcr_o                   ( tcr                                    )
 `ifdef DIFT_H
+    ,
     .thr_o                   ( thr                                    )
 `endif
 `endif
